import React from "react";
import ReactDOM from "react-dom";
import Login from "./components/login";
import Main from "./components/main";
import {
    HashRouter as Router,//the path in in the page url will after the #. e.g.http://localhost/#main
    Route,
    Link
} from "react-router-dom"
import {createStore} from "redux";
import {Provider} from "react-redux"
import appReducers from "./reducers/appReducers";


class App extends React.Component {
    constructor(prop) {
        super(prop);
    }

    // the render function will construct the react virtual dom tree, then will be translated to the real html dom tree
    // when the state is changed by call setState function, this function will be called again to refresh the virtual dom tree.
    // then the react framework will run a comparasion to detect if need and how refresh the real dom tree. see detail:https://reactjs.org/docs/reconciliation.html
    render() {
        return (
            <Router>
                <div>
                    <Route exact path="/" component={Login}/>
                    <Route path="/main" component={Main}/>
                </div>
            </Router>
        );
    } 
}

// create the state store first to construct the initial state tree for the SPA
let store = createStore(appReducers);

// ReactDOM rendeor the component in the html element.
ReactDOM.render(
    // wrap the App component with a Provider component, and set the state store as the property of the Provider.
    // the store property of the Provider can be get in all nested components(it depends on the context feature of reactjs,see:https://reactjs.org/docs/context.html), it will be used in the container component generated by redux.
    <Provider store={store}>
        <App/>
    </Provider>,
    document.getElementById("root"));
